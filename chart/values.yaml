## BigBang Specific Values
istio:
  # Toggle istio integration
  enabled: false
  injection: disabled
  hardened:
    enabled: false
    outboundTrafficPolicyMode: "REGISTRY_ONLY"
    customServiceEntries: []
      # - name: "allow-google"
      #   enabled: true
      #   spec:
      #     exportTo:
      #       - "."
      #     hosts:
      #       - google.com
      #     location: MESH_EXTERNAL
      #     ports:
      #       - number: 443
      #         protocol: TLS
      #         name: https
      #     resolution: DNS
    customAuthorizationPolicies: []
    # - name: "allow-nothing"
    #   enabled: true
    #   spec: {}
    gitlab:
      enabled: true
      namespaces:
        - gitlab
    monitoring:
      enabled: true
      namespaces:
        - monitoring
      principals:
        - cluster.local/ns/monitoring/sa/monitoring-grafana
        - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-alertmanager
        - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-operator
        - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-prometheus
        - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-state-metrics
        - cluster.local/ns/monitoring/sa/monitoring-monitoring-prometheus-node-exporter
  # -- Default peer authentication
  mtls:
    # -- STRICT = Allow only mutual TLS traffic,
    # PERMISSIVE = Allow both plain text and mutual TLS traffic
    mode: STRICT

monitoring:
  enabled: false

networkPolicies:
  enabled: false
  # See `kubectl cluster-info` and then resolve to IP
  controlPlaneCidr: 0.0.0.0/0
  # -- Kube API Port, defaults to 443 and 6443 within the template but can be set to custom port
  # The port where the Kubernetes API server listens for secure connections.
  kubeAPIPort: ""
  additionalPolicies: []
  # expected use case is to open egress for runner jobs
  # This is a dev example policy spec and CIDR 0.0.0.0/0 is unsafe for operational environments
  # requests to controlPlane should also be blocked in an operational policy
  # - name: egress-runner-jobs
  #   spec:
  #     podSelector: {}
  #     policyTypes:
  #     - Egress
  #     egress:
  #     - to:
  #       - ipBlock:
  #           cidr: 0.0.0.0/0
  #           except:
  #           # Block requests to AWS cloud metadata IP
  #           - 169.254.169.254/32
  #           # Block requests to controlPlane if CIDR not 0.0.0.0/0
  #           # - "{{ $.Values.networkPolicies.controlPlaneCidr }}"

# autoRegister requires kyverno deployed in k8s cluster and is intended for an in-cluster Gitlab
autoRegister:
  enabled: false
# selectorLabels is available to define a specific label to utilize kyverno clusterPolicy to copy the
# secret for runner registration to any additional namespace matching this key: value label.
# Leaving this unset will default to the namespace selector matchLabel kubernetes.io/metadata.name: "{{ .Release.Namespace }}".
# YAML constraints require a map to iterate over for multiple entries, see below example, which copies the runner secret to
# namespaces with the labels `kubernetes.io/metadata.name: namespace1` and `kubernetes.io/metadata.name: namespace2` for use:
# selectorLabels:
#   - matchLabels:
#       kubernetes.io/metadata.name: namespace1
#   - matchLabels:
#       kubernetes.io/metadata.name: namespace2

  selectorLabels: {}


bbtests:
  enabled: false
  cypress:
    artifacts: true
    envs:
      cypress_url: http://gitlab-webservice-default.gitlab.svc.cluster.local:8181
      cypress_gitlab_project: "runner-hello-world"
    secretEnvs:
      - name: cypress_adminpassword
        valueFrom:
          secretKeyRef:
            name: gitlab-gitlab-initial-root-password
            key: password

openshift: false

## Gitlab Runner specific settings
## GitLab Runner Image
##
## By default it's using registry.gitlab.com/gitlab-org/gitlab-runner:alpine-v{VERSION}
## where {VERSION} is taken from Chart.yaml from appVersion field
##
## ref: https://gitlab.com/gitlab-org/gitlab-runner/container_registry/29383?orderBy=NAME&sort=asc&search[]=alpine-v&search[]=
##
## Note: If you change the image to the ubuntu release
##       don't forget to change the securityContext;
##       these images run on different user IDs.
##
upstream:
  ## declaring fullnameoverride to keep application name as gitlab-runner because passthrough changes the name to gitlab-runner-upstream which is leading to runner failure
  fullnameOverride: "gitlab-runner"
  image:
    registry: registry1.dso.mil
    image: ironbank/gitlab/gitlab-runner/gitlab-runner
    tag: v18.3.0
  
  ## When using GitLab Runner Helm Chart with gitlab-runner-ubi-images (https://gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/container_registry)
  ## the installation fails because dumb-init is not packaged in the image. However, the tini is present.
  ## This configuration will allow gitlab-runner-ubi-images users to explicitly enabled the use of `tini` instead of `dumb-init`
  useTini: true
  ## The GitLab Server URL (with protocol) that want to register the runner against
  ## ref: https://docs.gitlab.com/runner/commands/index.html#gitlab-runner-register
  ##
  gitlabUrl: http://gitlab-webservice-default.gitlab.svc.cluster.local:8181
  
  ## Configure the maximum number of concurrent jobs
  ## ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-global-section
  ##
  concurrent: 50

  ## For RBAC support:
  rbac:
    ## Specifies whether a Role and RoleBinding should be created
    ## If this value is set to `true`, `serviceAccount.create` should also be set to either `true` or `false`
    ##
    create: true
    ## Define the generated serviceAccountName when create is set to true
    ## It defaults to "gitlab-runner.fullname" if not provided
    ## DEPRECATED: Please use `serviceAccount.name` instead
    generatedServiceAccountName: ""
    
    ## Specify annotations for Service Accounts, useful for annotations such as eks.amazonaws.com/role-arn.
    ## Values may refer to other values as the _tpl_ function is implicitly applied. Mind the quotes when using this, e.g.
    ## serviceAccountAnnotations:
    ##   eks.amazonaws.com/role-arn: "arn:aws:iam::{{ .Values.global.accountId }}:role/{{ .Values.global.iamRoleName }}"
    ##
    ## ref: https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html
    ##
    ## DEPRECATED: Please use `serviceAccount.annotations` instead
    ##
    # serviceAccountAnnotations: { }
  
  ## Configure integrated Prometheus metrics exporter
  ##
  ## ref: https://docs.gitlab.com/runner/monitoring/#configuration-of-the-metrics-http-server
  ##
  metrics:
    enabled: false
  
    ## Define a name for the metrics port
    ##
    portName: tcp-metrics
  
  ## Configure a service resource e.g., to allow scraping metrics via
  ## prometheus-operator serviceMonitor
  service:
    enabled: true
  
  ## Configuration for the Pods that the runner launches for each new job
  ##
  runners:
    job:
      registry: registry1.dso.mil
      repository: ironbank/redhat/ubi/ubi9
      tag: "9.6"
    helper:
      registry: registry1.dso.mil
      repository: ironbank/gitlab/gitlab-runner/gitlab-runner-helper
      tag: "v18.3.0"
  
    # runner configuration, where the multi line strings is evaluated as
    # template so you can specify helm values inside of it.
    #
    # tpl: https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
    # runner configuration: https://docs.gitlab.com/runner/configuration/advanced-configuration.html
    config: |
      [[runners]]
        clone_url = "http://gitlab-webservice-default.gitlab.svc.cluster.local:8181"
        cache_dir = "/tmp/gitlab-runner/cache"
        [runners.kubernetes]
          pull_policy = "always"
          namespace = "{{.Release.Namespace}}"
          image = "{{ printf "%s/%s:%s" .Values.runners.job.registry .Values.runners.job.repository .Values.runners.job.tag }}"
          helper_image = "{{ printf "%s/%s:%s" .Values.runners.helper.registry .Values.runners.helper.repository .Values.runners.helper.tag }}"
          image_pull_secrets = ["private-registry"]
        [runners.kubernetes.pod_security_context]
          run_as_non_root = true
          run_as_user = 1001
        [runners.kubernetes.helper_container_security_context]
          run_as_non_root = true
          run_as_user = 1001
        [runners.kubernetes.pod_labels]
          "job_id" = "${CI_JOB_ID}"
          "job_name" = "${CI_JOB_NAME}"
          "pipeline_id" = "${CI_PIPELINE_ID}"
          "app" = "gitlab-runner"

    ## The name of the secret containing runner-token and runner-registration-token
    secret: gitlab-gitlab-runner-secret
  
  ## Configure securitycontext for the main container
  ## ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
  ##
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    privileged: false
    capabilities:
      drop: ["ALL"]
  
  ## Configure securitycontext valid for the whole pod
  ## ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
  ##
  podSecurityContext:
    runAsUser: 1001
    runAsNonRoot: true
    # runAsGroup: 65533
    fsGroup: 65533
    # supplementalGroups: [65533]
  
    ## Note: values for the ubuntu image:
    # runAsUser: 999
    # fsGroup: 999
  
  containerSecurityContext:
    runAsNonRoot: true
  capabilities:
      drop:
        - ALL
  
  ## Configure resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  ##
  resources:
    limits:
      memory: 256Mi
      cpu: 200m
    requests:
      memory: 256Mi
      cpu: 200m